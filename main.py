import streamlit as st
import json
import base64
import re
import os
from prompt_engine import generate_experiment_plan

def sanitize_text(text):
    if not text or not isinstance(text, str):
        return ""
    text = text.replace("\n", " ").replace("\r", " ").replace("\t", " ")
    text = re.sub(r"\s+", " ", text)
    return text.strip()

def safe_display(text, method=st.info):
    clean_text = sanitize_text(text)
    method(clean_text)

def extract_json(text):
    try:
        match = re.search(r"\{[\s\S]+\}", text)
        return match.group(0) if match else text
    except:
        return text

def remove_units_from_text(text, unit):
    if not text or not unit.strip():
        return text
    escaped_unit = re.escape(unit.strip())
    return re.sub(rf"(\d+\.?\d*)\s*{escaped_unit}", r"\1", text)

def insert_units_in_goal(text, unit):
    if not text or not unit.strip():
        return text
    return re.sub(r"(\d+\.?\d*)", r"\1" + unit, text)

# --- Page Setup ---
st.set_page_config(page_title="A/B Test Architect", layout="wide")
st.title("\U0001F9EA AI-Powered A/B Test Architect")
st.markdown("Use Groq + LLMs to design smarter experiments from fuzzy product goals.")

if st.button("\U0001F504 Start Over"):
    st.session_state.clear()
    st.experimental_rerun()

# --- Product Context ---
st.header("\U0001F9E0 Product Context")
product_type = st.radio("Product Type *", ["SaaS", "Consumer App", "E-commerce", "Marketplace", "Gaming", "Other"], horizontal=True)
user_base = st.radio("User Base Size (DAU) *", ["< 10K", "10K‚Äì100K", "100K‚Äì1M", "> 1M"], horizontal=True)
metric_focus = st.radio("Primary Metric Focus *", ["Activation", "Retention", "Monetization", "Engagement", "Virality"], horizontal=True)
product_notes = st.text_area("Anything unique about your product or users?", placeholder="e.g. drop-off at pricing, seasonality, power users...")

# --- Metric Objective ---
st.markdown("## \U0001F3AF Metric Improvement Objective")
exact_metric = st.text_input("\U0001F3AF Metric to Improve * (e.g. Activation Rate, ARPU, DAU/MAU)")
metric_unit = st.text_input("\U0001F4C0 Metric Unit (e.g. %, $, secs, count)", value="%")
current_value_raw = st.text_input("\U0001F4C9 Current Metric Value * (numerical only)")
target_value_raw = st.text_input("\U0001F680 Target Metric Value * (numerical only)")

# --- Generate Plan ---
if st.button("Generate Plan") or "output" not in st.session_state:
    missing = []
    if not product_type: missing.append("Product Type")
    if not user_base: missing.append("User Base Size")
    if not metric_focus: missing.append("Primary Metric Focus")
    if not exact_metric.strip(): missing.append("Metric to Improve")
    if not current_value_raw.strip(): missing.append("Current Value")
    if not target_value_raw.strip(): missing.append("Target Value")
    if not metric_unit.strip(): missing.append("Metric Unit")

    if missing:
        st.warning("Please fill all required fields: " + ", ".join(missing))
        st.stop()

    try:
        current = float(current_value_raw)
        target = float(target_value_raw)
        expected_lift = round(target - current, 4)
        mde = round(abs((target - current) / current), 4) if current != 0 else 0.0
    except ValueError:
        st.error("Metric values must be numeric.")
        st.stop()

    st.session_state.current = current
    st.session_state.target = target
    st.session_state.auto_goal = f"I want to improve {exact_metric} from {current} to {target}."
    st.session_state.context = {
        "type": product_type,
        "users": user_base,
        "metric": metric_focus,
        "notes": product_notes,
        "exact_metric": exact_metric,
        "current_value": current,
        "target_value": target,
        "expected_lift": expected_lift,
        "minimum_detectable_effect": round(mde * 100, 2),
        "metric_unit": metric_unit.strip()
    }

    with st.spinner("\U0001F504 Generating your plan..."):
        output = generate_experiment_plan(st.session_state.auto_goal, st.session_state.context)
    st.session_state.output = output
    st.session_state.hypothesis_confirmed = False
    st.session_state.selected_index = None

# --- Display Output ---
if "output" in st.session_state:
    raw_output = extract_json(st.session_state.output)

    try:
        plan = json.loads(raw_output)
    except Exception as e:
        st.error(f"‚ùå Could not parse JSON: {e}")
        st.code(raw_output)
        st.stop()

    unit = " " + st.session_state.context.get("metric_unit", "").strip()

    st.markdown("## ‚úçÔ∏è Inferred Product Goal")
    safe_display(st.session_state.auto_goal, method=st.info)

    st.subheader("üß© Problem Statement")
    problem_statement = plan.get("problem_statement", "")
    problem_statement = remove_units_from_text(problem_statement, unit)
    safe_display(problem_statement or "‚ö†Ô∏è Problem statement not generated by the model.")

    st.subheader("üß™ Choose a Hypothesis")
    hypotheses = plan.get("hypotheses", [])

    if len(hypotheses) == 1 and not st.session_state.get("hypothesis_confirmed"):
        st.session_state.selected_index = 0
        st.session_state.hypothesis_confirmed = True
        st.experimental_rerun()

    if not hypotheses:
        st.warning("No hypotheses found in the generated plan.")
    else:
        for i, h in enumerate(hypotheses):
            hypo = h.get("hypothesis") if isinstance(h, dict) else str(h)
            with st.expander(f"H{i+1}: {hypo}", expanded=(st.session_state.selected_index == i)):
                if st.button(f"‚úÖ Select H{i+1}", key=f"select_{i}"):
                    st.session_state.selected_index = i
                    st.session_state.hypothesis_confirmed = True
                    st.experimental_rerun()

    if st.session_state.get("hypothesis_confirmed") and st.session_state.selected_index is not None:
        st.markdown("<a name='output'></a>", unsafe_allow_html=True)
        st.experimental_set_query_params(scroll="output")

        i = st.session_state.selected_index
        selected_hypo_obj = hypotheses[i] if i < len(hypotheses) else {}
        selected_hypo = selected_hypo_obj.get("hypothesis", "N/A")

        effort_list = plan.get("effort", [])
        effort = effort_list[i].get("effort", "N/A") if i < len(effort_list) else "N/A"

        variant_list = plan.get("variants", [])
        variant = variant_list[i] if i < len(variant_list) else {}
        control = variant.get("control", "Not specified")
        variation = variant.get("variation", "Not specified")

        rationale_list = plan.get("hypothesis_rationale", [])
        rationale = rationale_list[i].get("rationale", "N/A") if i < len(rationale_list) else "N/A"
        rationale = sanitize_text(rationale)

        st.markdown("### üß™ Selected Hypothesis")
        st.code(selected_hypo)

        st.markdown("### üîÅ Test Variants")
        st.markdown(f"- **Control**: {control}\n- **Variation**: {variation}")

        st.markdown("### üí° Rationale")
        st.markdown(rationale)

        export = f"""
# üìÑ Experiment PRD: {selected_hypo[:60]}

## üß© Problem Statement
{problem_statement}

## üéØ Objective
Increase {exact_metric} from {st.session_state.current} to {st.session_state.target} by launching a targeted experiment.

## üß™ Hypothesis
{selected_hypo}

## üîÅ Test Variants
- Control: {control}
- Variation: {variation}

## üí° Rationale
{rationale}
"""

        st.download_button(
            label="üì• Download PRD",
            data=export,
            file_name="experiment_prd.txt",
            mime="text/plain"
        )

st.markdown("""
<script>
    const params = new URLSearchParams(window.location.search);
    if (params.get("scroll") === "output") {
        const el = document.querySelector("a[name='output']");
        if (el) {
            el.scrollIntoView({ behavior: "smooth", block: "start" });
        }
    }
</script>
""", unsafe_allow_html=True)
